{"db":[{"meta":{"exported_on":1473240040680,"version":"005"},"data":{"posts":[{"id":1,"uuid":"6b4d0d48-1f79-4dd4-8ac5-a14a52119416","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","mobiledoc":null,"html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466661419097,"created_by":1,"updated_at":1466661419097,"updated_by":1,"published_at":1466661419122,"published_by":1},{"id":2,"uuid":"4abd43d5-9c94-43a6-8248-9675aa335002","title":"talk about git","slug":"talk-about-git-2","markdown":"git is a great content version control tool","mobiledoc":null,"html":"<p>git is a great content version control tool</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466665711529,"created_by":1,"updated_at":1466665853893,"updated_by":1,"published_at":1466665853893,"published_by":1},{"id":3,"uuid":"e9f8ac06-969e-436f-84ba-e820d8a6a0e6","title":"基于SSL 的 Node.js 的Nginx配置","slug":"ji-zhu-biao-ti-2","markdown":"**转载请注明链接**\n\n**http://www.brusport.com/ji-zhu-biao-ti-2/**\n\n\nNginx是一个非常高效的HTTP服务器，同时也是一个非常优秀的反向代理服务器.不想传统的服务器,ngnix遵循事件驱动的异步框架.因此内存占有量底，但是效率非常高.如果你的web 应用是基于Node.js的可以严肃的考虑让Nginx充当反向代理服务器.Ngnix可以非常高效的处理静态资源.对于其他的网络请求它跟Node.js对话然后发送相应给客户端(一般指浏览器).这篇文章我们将讨论怎么用Nginx配置Node.js.of course我们同时会讨论如何在Ngnix服务器中配置SLL.\n\n==安装Ngnix==\n\n先假设你们电脑里面已经安装好Node.js,接下来我们之间讨论如何安装Ngnix.\n\n(1)在MAC安装\n\n如果你的电脑是MAC你可以很方便的用[Homebrew](http://brew.sh/)安装.步骤如下：\n\nHomebrew 需要你的用户名来使用命令chown，命令如下:\nsudo chown -R 'username here' /usr/local\n[chown的使用说明](http://www.demopu.com/doc/linux/chown.html)\n\n然后用下面两个命令安装Nginx:\nbrew link pcre\nbrew install nginx\n\n一旦安装成功，用下面命令启动Ngnix\nsudo nginx\n\nNgnix的配置文件目录在:\n/usr/local/etc/nginx/nginx.conf.\n\n(2)在Ubuntu安装:\n如果你使用的Ubuntu环境可以使用下面的命令安装\nsudo apt-get update\nsudo apt-get install nginx\n\n一旦Ngnix安装成功，它会默认启动\n\n(3)在Windows安装\n对于Windows系统,先到Ngnix官网下载页[下载页](http://nginx.org/en/download.html)下载zip压缩包.在dos命令窗口定位到zip的路径，执行下列命令安装Ngnix.\n\nunzip nginx-1.3.13.zip\ncd nginx-1.3.13\nstart nginx\n\n如你看到的，start ngnix就是启动ngnix的命令\n\n现在Ngnix安装任务已经结束，接下来我们来看看如和简单的配置一个服务器.\n\n==安装一个Node.js服务器==\n首先,我们先创建一个简单的node.js服务器.你可以通过这个链接https://github.com/jsprodotcom/source/blob/master/nodejs-nginx-ssl-demo-app.zip ,快速下载基于Express的项目.如果你已经下载好这个zip文件后，通过命令行定位到demoApp目录，然后通过下面命令启动这个Express项目(端口默认是3000)\n\nnpm install\nnode bin/www\n\n基于你所在的系统环境，你可以直接打开nginx.conf配置文件.或者用命令\nnano /usr/local/etc/nginx/nginx.conf\n查了ngnix的配置文件.在配置文件里面你将看到类似的如下命令:\nserver {\n  listen       8080;\n  server_name  localhost;\n  ....\n}\n接下来你可以在 http块中的server块配置node.js服务器配置.我们想让Ngnix处理我们网站的静态资源，其他请求则传递给Node.js处理.所以我们配置如下\nserver {\n  listen       8080;#我的个人博客是放在aws的ubuntu环境里，对外开放的端口是80,所以在我的配置文件里面是写80,所以配置因人而异\n  server_name  localhost;#如果你用域名，可以用域名代替，比如www.brusport.com\n`\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n  location /public {\n    root /usr/local/var/www;\n  }\n}`\n如你所看到的，上面的nginx配置监听http://localhost:8080. 同时Location/ 块是用来告诉Ngnix如何处理外来的请求.在location块中我们用proxy_pass来指定Node.js来处理请求(在我们例子中就是指http://localhost:3000)\n\n同时我们还需要一个Location /public块来告诉Ngnix如何处理静态资源的请求.在这个location块中我们设置了目录/usr/local/var/www,又来指定静态资源的目录(当然这个目录根据每个人的实际情况而定).所以如果有如下情况http://localhost:8080/public/somepath/file.html 实际上ngnix将会访问文件 /usr/local/var/www/public/somepath/file.html.\n\n如果上面的关于nginx.conf的配置已经配置完了，保持nginx.conf的修改然后又下面命令重新启动nginx.\nMac:\nsudo nginx -s stop && sudo nginx\n\nUbuntu:\nsudo service nginx restart\nOr\nsudo /etc/init.d/nginx restart\n\nWindows:\nnginx -s reload\n\n\n==Setting Up SSL==\n\n搭建一个正式的网站，大多数你需要配置SSL来保护敏感信息.正常我们一般会去一个认证机构同时得到一个颁发的证书.当然你也可以创建一个自己签名的正书.但是在别人的浏览器打开网站会警告“此证书不能被信赖”.但是如果只是出于本地测试，显示是正常的.下面我们讨论如何创建自己的SSL证书.\n\n一旦你已经拥有SSL证书和一个私钥你就可以在Ngnix配置SSL.修改配置如下:\n`\nserver {\n listen       8080;\n listen       443 ssl;\n server_name  localhost;\n ssl_certificate  /etc/nginx/ssl/server.crt \n ssl_certificate_key /etc/nginx/ssl/server.key\n location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n  location /public {\n    root /usr/local/var/www;\n  }\n}`\n\n如上所示，就是这么简单。现在你访问https://localhost:8080, SSL设置将正常工作./etc/nginx/ssl/server.crt and /etc/nginx/ssl/server.key 分别是你本地存储证书文件和私钥的位置（ 路径根据具体情况而改变）。\n\nrefer to https://www.sitepoint.com/configuring-nginx-ssl-node-js/\n\nthx a lot\n\n                                          Bruce liu\n                                          2016.7.2","mobiledoc":null,"html":"<p><strong>转载请注明链接</strong></p>\n\n<p><strong><a href=\"http://www.brusport.com/ji-zhu-biao-ti-2/\">http://www.brusport.com/ji-zhu-biao-ti-2/</a></strong></p>\n\n<p>Nginx是一个非常高效的HTTP服务器，同时也是一个非常优秀的反向代理服务器.不想传统的服务器,ngnix遵循事件驱动的异步框架.因此内存占有量底，但是效率非常高.如果你的web 应用是基于Node.js的可以严肃的考虑让Nginx充当反向代理服务器.Ngnix可以非常高效的处理静态资源.对于其他的网络请求它跟Node.js对话然后发送相应给客户端(一般指浏览器).这篇文章我们将讨论怎么用Nginx配置Node.js.of course我们同时会讨论如何在Ngnix服务器中配置SLL.</p>\n\n<p><mark>安装Ngnix</mark></p>\n\n<p>先假设你们电脑里面已经安装好Node.js,接下来我们之间讨论如何安装Ngnix.</p>\n\n<p>(1)在MAC安装</p>\n\n<p>如果你的电脑是MAC你可以很方便的用<a href=\"http://brew.sh/\">Homebrew</a>安装.步骤如下：</p>\n\n<p>Homebrew 需要你的用户名来使用命令chown，命令如下: <br />\nsudo chown -R 'username here' /usr/local <br />\n<a href=\"http://www.demopu.com/doc/linux/chown.html\">chown的使用说明</a></p>\n\n<p>然后用下面两个命令安装Nginx:\nbrew link pcre <br />\nbrew install nginx</p>\n\n<p>一旦安装成功，用下面命令启动Ngnix\nsudo nginx</p>\n\n<p>Ngnix的配置文件目录在: <br />\n/usr/local/etc/nginx/nginx.conf.</p>\n\n<p>(2)在Ubuntu安装:\n如果你使用的Ubuntu环境可以使用下面的命令安装\nsudo apt-get update <br />\nsudo apt-get install nginx</p>\n\n<p>一旦Ngnix安装成功，它会默认启动</p>\n\n<p>(3)在Windows安装\n对于Windows系统,先到Ngnix官网下载页<a href=\"http://nginx.org/en/download.html\">下载页</a>下载zip压缩包.在dos命令窗口定位到zip的路径，执行下列命令安装Ngnix.</p>\n\n<p>unzip nginx-1.3.13.zip <br />\ncd nginx-1.3.13 <br />\nstart nginx</p>\n\n<p>如你看到的，start ngnix就是启动ngnix的命令</p>\n\n<p>现在Ngnix安装任务已经结束，接下来我们来看看如和简单的配置一个服务器.</p>\n\n<p><mark>安装一个Node.js服务器</mark>\n首先,我们先创建一个简单的node.js服务器.你可以通过这个链接<a href=\"https://github.com/jsprodotcom/source/blob/master/nodejs-nginx-ssl-demo-app.zip\">https://github.com/jsprodotcom/source/blob/master/nodejs-nginx-ssl-demo-app.zip</a> ,快速下载基于Express的项目.如果你已经下载好这个zip文件后，通过命令行定位到demoApp目录，然后通过下面命令启动这个Express项目(端口默认是3000)</p>\n\n<p>npm install <br />\nnode bin/www</p>\n\n<p>基于你所在的系统环境，你可以直接打开nginx.conf配置文件.或者用命令\nnano /usr/local/etc/nginx/nginx.conf <br />\n查了ngnix的配置文件.在配置文件里面你将看到类似的如下命令:\nserver { <br />\n  listen       8080;\n  server<em>name  localhost;\n  ....\n}\n接下来你可以在 http块中的server块配置node.js服务器配置.我们想让Ngnix处理我们网站的静态资源，其他请求则传递给Node.js处理.所以我们配置如下\nserver { <br />\n  listen       8080;#我的个人博客是放在aws的ubuntu环境里，对外开放的端口是80,所以在我的配置文件里面是写80,所以配置因人而异\n  server</em>name  localhost;#如果你用域名，可以用域名代替，比如www.brusport.com\n<code>\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n  location /public {\n    root /usr/local/var/www;\n  }\n}</code>\n如你所看到的，上面的nginx配置监听<a href=\"http://localhost:8080\">http://localhost:8080</a>. 同时Location/ 块是用来告诉Ngnix如何处理外来的请求.在location块中我们用proxy_pass来指定Node.js来处理请求(在我们例子中就是指<a href=\"http://localhost:3000\">http://localhost:3000</a>)</p>\n\n<p>同时我们还需要一个Location /public块来告诉Ngnix如何处理静态资源的请求.在这个location块中我们设置了目录/usr/local/var/www,又来指定静态资源的目录(当然这个目录根据每个人的实际情况而定).所以如果有如下情况<a href=\"http://localhost:8080/public/somepath/file.html\">http://localhost:8080/public/somepath/file.html</a> 实际上ngnix将会访问文件 /usr/local/var/www/public/somepath/file.html.</p>\n\n<p>如果上面的关于nginx.conf的配置已经配置完了，保持nginx.conf的修改然后又下面命令重新启动nginx.\nMac: <br />\nsudo nginx -s stop &amp;&amp; sudo nginx</p>\n\n<p>Ubuntu: <br />\nsudo service nginx restart <br />\nOr <br />\nsudo /etc/init.d/nginx restart</p>\n\n<p>Windows: <br />\nnginx -s reload</p>\n\n<p><mark>Setting Up SSL</mark></p>\n\n<p>搭建一个正式的网站，大多数你需要配置SSL来保护敏感信息.正常我们一般会去一个认证机构同时得到一个颁发的证书.当然你也可以创建一个自己签名的正书.但是在别人的浏览器打开网站会警告“此证书不能被信赖”.但是如果只是出于本地测试，显示是正常的.下面我们讨论如何创建自己的SSL证书.</p>\n\n<p>一旦你已经拥有SSL证书和一个私钥你就可以在Ngnix配置SSL.修改配置如下:\n<code>\nserver { <br />\n listen       8080;\n listen       443 ssl;\n server_name  localhost;\n ssl_certificate  /etc/nginx/ssl/server.crt \n ssl_certificate_key /etc/nginx/ssl/server.key\n location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n  location /public {\n    root /usr/local/var/www;\n  }\n}</code></p>\n\n<p>如上所示，就是这么简单。现在你访问<a href=\"https://localhost:8080\">https://localhost:8080</a>, SSL设置将正常工作./etc/nginx/ssl/server.crt and /etc/nginx/ssl/server.key 分别是你本地存储证书文件和私钥的位置（ 路径根据具体情况而改变）。</p>\n\n<p>refer to <a href=\"https://www.sitepoint.com/configuring-nginx-ssl-node-js/\">https://www.sitepoint.com/configuring-nginx-ssl-node-js/</a></p>\n\n<p>thx a lot</p>\n\n<pre><code>                                      Bruce liu\n                                      2016.7.2\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1466667971559,"created_by":1,"updated_at":1467622874216,"updated_by":1,"published_at":1466668217005,"published_by":1},{"id":4,"uuid":"fa288e3f-863e-49af-8b4f-dc559ca9b5bd","title":"聊聊Javascript中神奇的关键字this","slug":"liao-liao-javascriptzhong-shen-qi-de-guan-jian-zi-this","markdown":"转载请注明链接\nhttp://www.brusport.com/liao-liao-javascriptzhong-shen-qi-de-guan-jian-zi-this/\nthis是javascript中比较tricky的关键字之一.如果你不清楚它的工作的原理的话很难去使用它.\n\n下面我们以this在javacript中的事件处理中的表现来解释this的用法.\n\n==Owener==\n\nowner翻译过来过来就是拥有者的意思.\n下面我们主要通过解释下面的这个函数doSomething()中的this指向哪个owner，来解释this的用法.\n\n` function doSomething(){\n   this.style.color='#cc0000'\n }\n`\n\n在javascript中this往往指向的是执行相应的函数的woner(环境或者宿主).或者指向包含该函数的对象.当我们定义简单的在页面中定义函数doSomething()的时候，这时候对应的owner就是页面本身，或者javascript中的window对象.一般的页面元素拥有onclick属性.它们之间的从属关系如下图:\n`\n------------ window --------------------------------------\n|                                          / \\           |\n|                                           |            |\n|                                          this          |\n|   ----------------                        |            |\n|   | HTML element | <-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          --------------------                          |\n|          | onclick property |                          |\n|          --------------------                          |\n|                                                        |\n----------------------------------------------------------`\n\n如果你直接执行doSomething(),则this会直接指向window对象.doSomething函数中会试着去改变window的style.color熟悉。由于window对象不存在style熟悉，所以执行doSomething()会报错.\n\n==Copying==\n\n这里的copy是指,把看起来单独的函数 赋给适当的元素属性上.\n如果我们最大程度的利用this,我们必须注意让正确的html元素拥有对应的函数.也就说说，我们必须把doSomething函数赋给对应的html元素的onclick属性.\n\n`element.onclick = doSomething; //element就是指html中的元素，可以是button,a,甚至div...`\n\n通过这个赋值语句，函数为赋于了html元素的onclick属性上.( 如果一个函数充当某个对象的属性，只是函数可以叫方法).所以这时候你执行onclick的时候,this指向的是element.由于html的元素拥有color属性，所以执行doSomething不会报错，同事颜色会做相应改变.\n`\n------------ window --------------------------------------\n|                                                        |\n|                                                        |\n|                                                        |\n|   ----------------                                     |\n|   | HTML element | <-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          -----------------------          |            |\n|          |copy of doSomething()|  <-- copy function    |\n|          -----------------------                       |\n|                                                        |\n----------------------------------------------------------`\n\n因此通过这种方法，你可以最大程度上使用this.每次函数被调用,this就会指向html对应的元素.html元素拥有doSomething()的副本.\n\n==Referring==\n\n然后如果你使用内联html元素事件注册.如下:\n\n`<element onclick=\"doSomething()\">`\n\n只是给onclick指向doSomething的调用引用，而不是通过直接给onclick属性赋予doSomething的副本.这区别是很大的.因为此时的onclick属性不包含正式的doSomething函数，而只是包含soSomething的调用\n\n`doSomething();`\n\n所以当执行doSomething()的时候，this再一次指向全局 window对象，再一次会执行错误\n\n`\n------------ window --------------------------------------\n|                                          / \\           |\n|                                           |            |\n|                                          this          |\n|   ----------------                        |            |\n|   | HTML element | <-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          -----------------------         / \\           |\n|          | go to doSomething() |          |            |\n|          | and execute it      | ---- reference to     |\n|          -----------------------       function        |\n|                                                        |\n----------------------------------------------------------`\n\n==The difference==\n\n如果你想使用this去访问处理onclick事件的的html元素,你必须保证this关键字写到onclick属性中.只有这样，让this才指向被onclick所注册的html元素.你可以做如下测试:\n\n`element.onclick = doSomething;\nalert(element.onclick)`\n\n你讲看到\n`\nfunction doSomething()\n{\n\tthis.style.color = '#cc0000';\n}\n`\n正如你看到的，this关键字出现在onclick方法中.因此this指向html元素.\n但是如果你测试如下:\n`\n<element onclick=\"doSomething()\">\nalert(element.onclick)`\n\n你将看到:\n`\nfunction onclick()\n{\n\tdoSomething()\n}`\n\nthis关键字没有在onclick方法中，所以它没有指向html元素\n==Examples - copying==\n\n下面列出直接将this写进onclick方法的写法:\n\nelement.onclick = doSomething\nelement.addEventListener('click',doSomething,false)\nelement.onclick = function () {this.style.color = '#cc0000';}\n<element onclick=\"this.style.color = '#cc0000';\">\n\n==Examples - referring==\n\n下面列出直接将this指向window对象的写法:\n\nelement.onclick = function () {doSomething()}\nelement.attachEvent('onclick',doSomething)\n<element onclick=\"doSomething()\">\n\n需要注意的是attachEvent().微软事件注册模式的主要缺点是attachEvent（）会生成一个指向函数调用的引用而不是复制函数本身.\n\n\n==Combination==\n\n下面我们说个技巧，如果我们既要想用代码内联形式做事件处理注册，又想对应的处理函数中的 this能正确执行，可以参考下面的做法:\n\n`<element onclick=\"doSomething(this)\">\nfunction doSomething(obj) {\n\t// this is present in the event handler and is sent to the function\n\t// obj now refers to the HTML element, so we can do\n\tobj.style.color = '#cc0000';\n}`\n\nthx\n\n`refer to http://www.quirksmode.org/js/this.html`\n\n`bruce liu                           --2016,7.9.  `\n","mobiledoc":null,"html":"<p>转载请注明链接\n<a href=\"http://www.brusport.com/liao-liao-javascriptzhong-shen-qi-de-guan-jian-zi-this/\">http://www.brusport.com/liao-liao-javascriptzhong-shen-qi-de-guan-jian-zi-this/</a> <br />\nthis是javascript中比较tricky的关键字之一.如果你不清楚它的工作的原理的话很难去使用它.</p>\n\n<p>下面我们以this在javacript中的事件处理中的表现来解释this的用法.</p>\n\n<p><mark>Owener</mark></p>\n\n<p>owner翻译过来过来就是拥有者的意思. <br />\n下面我们主要通过解释下面的这个函数doSomething()中的this指向哪个owner，来解释this的用法.</p>\n\n<p><code>function doSomething(){\n   this.style.color='#cc0000'\n }\n</code></p>\n\n<p>在javascript中this往往指向的是执行相应的函数的woner(环境或者宿主).或者指向包含该函数的对象.当我们定义简单的在页面中定义函数doSomething()的时候，这时候对应的owner就是页面本身，或者javascript中的window对象.一般的页面元素拥有onclick属性.它们之间的从属关系如下图:\n<code>\n------------ window --------------------------------------\n|                                          / \\           |\n|                                           |            |\n|                                          this          |\n|   ----------------                        |            |\n|   | HTML element | &lt;-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          --------------------                          |\n|          | onclick property |                          |\n|          --------------------                          |\n|                                                        |\n----------------------------------------------------------</code></p>\n\n<p>如果你直接执行doSomething(),则this会直接指向window对象.doSomething函数中会试着去改变window的style.color熟悉。由于window对象不存在style熟悉，所以执行doSomething()会报错.</p>\n\n<p><mark>Copying</mark></p>\n\n<p>这里的copy是指,把看起来单独的函数 赋给适当的元素属性上.\n如果我们最大程度的利用this,我们必须注意让正确的html元素拥有对应的函数.也就说说，我们必须把doSomething函数赋给对应的html元素的onclick属性.</p>\n\n<p><code>element.onclick = doSomething; //element就是指html中的元素，可以是button,a,甚至div...</code></p>\n\n<p>通过这个赋值语句，函数为赋于了html元素的onclick属性上.( 如果一个函数充当某个对象的属性，只是函数可以叫方法).所以这时候你执行onclick的时候,this指向的是element.由于html的元素拥有color属性，所以执行doSomething不会报错，同事颜色会做相应改变.\n<code>\n------------ window --------------------------------------\n|                                                        |\n|                                                        |\n|                                                        |\n|   ----------------                                     |\n|   | HTML element | &lt;-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          -----------------------          |            |\n|          |copy of doSomething()|  &lt;-- copy function    |\n|          -----------------------                       |\n|                                                        |\n----------------------------------------------------------</code></p>\n\n<p>因此通过这种方法，你可以最大程度上使用this.每次函数被调用,this就会指向html对应的元素.html元素拥有doSomething()的副本.</p>\n\n<p><mark>Referring</mark></p>\n\n<p>然后如果你使用内联html元素事件注册.如下:</p>\n\n<p><code>&lt;element onclick=\"doSomething()\"&gt;</code></p>\n\n<p>只是给onclick指向doSomething的调用引用，而不是通过直接给onclick属性赋予doSomething的副本.这区别是很大的.因为此时的onclick属性不包含正式的doSomething函数，而只是包含soSomething的调用</p>\n\n<p><code>doSomething();</code></p>\n\n<p>所以当执行doSomething()的时候，this再一次指向全局 window对象，再一次会执行错误</p>\n\n<p><code>\n------------ window --------------------------------------\n|                                          / \\           |\n|                                           |            |\n|                                          this          |\n|   ----------------                        |            |\n|   | HTML element | &lt;-- this         -----------------  |\n|   ----------------      |           | doSomething() |  |\n|               |         |           -----------------  |\n|          -----------------------         / \\           |\n|          | go to doSomething() |          |            |\n|          | and execute it      | ---- reference to     |\n|          -----------------------       function        |\n|                                                        |\n----------------------------------------------------------</code></p>\n\n<p><mark>The difference</mark></p>\n\n<p>如果你想使用this去访问处理onclick事件的的html元素,你必须保证this关键字写到onclick属性中.只有这样，让this才指向被onclick所注册的html元素.你可以做如下测试:</p>\n\n<p><code>element.onclick = doSomething;\nalert(element.onclick)</code></p>\n\n<p>你讲看到\n<code>\nfunction doSomething() <br />\n{\n    this.style.color = '#cc0000';\n}\n</code>\n正如你看到的，this关键字出现在onclick方法中.因此this指向html元素.\n但是如果你测试如下:\n<code>\n&lt;element onclick=\"doSomething()\"&gt; <br />\nalert(element.onclick)</code></p>\n\n<p>你将看到:\n<code>\nfunction onclick() <br />\n{\n    doSomething()\n}</code></p>\n\n<p>this关键字没有在onclick方法中，所以它没有指向html元素 <br />\n<mark>Examples - copying</mark></p>\n\n<p>下面列出直接将this写进onclick方法的写法:</p>\n\n<p>element.onclick = doSomething <br />\nelement.addEventListener('click',doSomething,false) <br />\nelement.onclick = function () {this.style.color = '#cc0000';} <br />\n<element onclick=\"this.style.color = '#cc0000';\"></p>\n\n<p><mark>Examples - referring</mark></p>\n\n<p>下面列出直接将this指向window对象的写法:</p>\n\n<p>element.onclick = function () {doSomething()} <br />\nelement.attachEvent('onclick',doSomething) <br />\n<element onclick=\"doSomething()\"></p>\n\n<p>需要注意的是attachEvent().微软事件注册模式的主要缺点是attachEvent（）会生成一个指向函数调用的引用而不是复制函数本身.</p>\n\n<p><mark>Combination</mark></p>\n\n<p>下面我们说个技巧，如果我们既要想用代码内联形式做事件处理注册，又想对应的处理函数中的 this能正确执行，可以参考下面的做法:</p>\n\n<p><code>&lt;element onclick=\"doSomething(this)\"&gt;\nfunction doSomething(obj) { <br />\n    // this is present in the event handler and is sent to the function\n    // obj now refers to the HTML element, so we can do\n    obj.style.color = '#cc0000';\n}</code></p>\n\n<p>thx</p>\n\n<p><code>refer to http://www.quirksmode.org/js/this.html</code></p>\n\n<p><code>bruce liu                           --2016,7.9.</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1468075876399,"created_by":1,"updated_at":1468079906750,"updated_by":1,"published_at":1468079882505,"published_by":1},{"id":5,"uuid":"b170b125-2cf9-488a-8cf9-e3ffde939fe9","title":"闲谈javascript的闭包机制","slug":"xian-tan-javascriptde-bi-bao-ji-zhi","markdown":"\n转载请注明链接 http://www.brusport.com/xian-tan-javascriptde-bi-bao-ji-zhi/\n\n闭包可以让javacript coder写出更好，更创造性，更精简的代码.不管你javacript的经验如何,可以确定的是你将不可避免的时常遇到闭包.也许在你的理解范围内，闭包看起来有点复杂，但是通过阅读本文，闭包将可以被很容易得理解.\n\n==What is a closure?==\n\n闭包的英文名是closure,直译就是关闭，关口.javacript中的闭包就是一个内嵌/内部函数，它可以访问它的直接外层函数的变量.闭包有三个scope chain(其实就是域链):它可以访问自己的域范围里面的变量,它可以范围它的直接外层函数的变量，它还可以访问全局变量(一般指window中的变量).\n\n这个内部函数(闭包)不但可以访问它直接外部函数的变量，还可以访问外部函数的参数.但是要注意的是，内部函数不可以访问外部函数参数的arguments对象。\n\n下面我们举个简单的闭包例子\n`\nfunction showName(firstName,lastName){\n return (function makeFullName(){\n       return 'my name is '+firstName+' '+lastName+' ';\n    })();\n}\nshowName('liu','bruce');//my name is liu bruce\n`\n闭包被广泛的用在Node.js,使用在Node.js的异步,非块结构.jquery也广泛的使用闭包.下面举个经典的jquery闭包应用:\n`\n$(function(){\n var selections=[];\n     $(\".niners\").click(function(){\n      selections.push(this.prop(\"name\"));\n   })\n})\n`\n==Closures’ Rules and Side Effects==\n\n下面我们谈谈闭包的使用准则和副作用.\n\n1.闭包可以访问它的外层函数的变量，即使该外层函数已经返回(执行return):\n  关于闭包中最难同时也是最重要的特点之一就是：即使闭包的外层函数已经执行return,但是它还是可以访问外层函数的变量.\n\n`\nfunction celebrityName (firstName) {\n    var nameIntro = \"This celebrity is \";\n    // 内部函数lastName可以直接访问外部函数的变量和参数\n   function lastName (theLastName) {\n        return nameIntro + firstName + \" \" + theLastName;\n    }\n    return lastName;\n}\nvar mjName = celebrityName (\"Michael\"); // 返回的是lastName\nmjName (\"Jackson\"); // This celebrity is Michael Jackson \n// 闭包 (lastName) 被调用\n// 如结果所示，闭包还是可以直接访问外部函数的变量和参数\n`\n\n2.闭包存储外部函数变量的引用;它不存真实的值.在闭包被正式被调用前修改外部函数的变量值将会发生很多有趣的事情.我们可以把闭包这个强大的特征使用在多个有创意的事情上.比如下面例子，我们可以创建一个private变量.\n`\nfunction celebrityID () {\n    var celebrityID = 999;\n    // 我们将返回一个拥有多个内部函数的对象.\n    // 所有的内部函数都可以访问外部函数的变量\n    return {\n        getID: function ()  {\n          return celebrityID;// 这个内部函数将会返回celebrityID变量的值​\n        },\n        setID: function (theNewID)  {\n            celebrityID = theNewID;//这个内部函数将会改变外部函数的变量的值\n        }\n    }\n}\n​\n​var mjID = celebrityID ();\nmjID.getID(); // 999​\nmjID.setID(567); // 改变外部函数的变量值\nmjID.getID(); // 567: 将会返回最新的外部函数的变量值\n`\n\n==Closures Gone Awry==\n\n闭包的错误用法.\n由于闭包可以访问外部函数的变量，所以在一个循环中使用闭包经常会导致意外的错误.下面举个闭包在循环中的应用例子:\n`\n​function celebrityIDCreator (theCelebrities) {\n    var i;\n    var uniqueID = 100;\n    for (i = 0; i < theCelebrities.length; i++) {\n      theCelebrities[i][\"id\"] = function (i)  {\n        (function(x){\n         return uniqueID + x;\n       })();\n      }\n    }\n    return theCelebrities;\n}\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\n​var stalloneID = createIdForActionCelebs [0];  \nconsole.log(stalloneID.id()); // 103\n`\n有没有发现输出的结果有点出乎意料，为什么结果不是100而是103.之前这个例子中，随着这个异步函数被一次次的被调用，i最好被递增到3.用于闭包是通过引用访问外部函数的变量,而不是通过值.所以调用闭包时，最后的返回值都是103.\n\n为了修改这个因为闭包引起的副作用，我们使用\"创建一个匿名函数并立刻执行\"的方法:\n`\n​function celebrityIDCreator (theCelebrities) {\n    var i;\n    var uniqueID = 100;\n    for (i = 0; i < theCelebrities.length; i++) {\n      theCelebrities[i][\"id\"] =(function(x){//x参数是i在调用时传过去的\n         return function ()  {\n           return uniqueID + x;\n         }\n      })(i);\n    }\n    return theCelebrities;\n}\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\n​var stalloneID = createIdForActionCelebs [0];  \nconsole.log(stalloneID.id()); // 103\n`\n\nrefer to http://javascriptissexy.com/understand-javascript-closures-with-ease/\n\nthx\n\n`bruce liu                           --2016,7.11.`\n\n\n\n","mobiledoc":null,"html":"<p>转载请注明链接 <a href=\"http://www.brusport.com/xian-tan-javascriptde-bi-bao-ji-zhi/\">http://www.brusport.com/xian-tan-javascriptde-bi-bao-ji-zhi/</a></p>\n\n<p>闭包可以让javacript coder写出更好，更创造性，更精简的代码.不管你javacript的经验如何,可以确定的是你将不可避免的时常遇到闭包.也许在你的理解范围内，闭包看起来有点复杂，但是通过阅读本文，闭包将可以被很容易得理解.</p>\n\n<p><mark>What is a closure?</mark></p>\n\n<p>闭包的英文名是closure,直译就是关闭，关口.javacript中的闭包就是一个内嵌/内部函数，它可以访问它的直接外层函数的变量.闭包有三个scope chain(其实就是域链):它可以访问自己的域范围里面的变量,它可以范围它的直接外层函数的变量，它还可以访问全局变量(一般指window中的变量).</p>\n\n<p>这个内部函数(闭包)不但可以访问它直接外部函数的变量，还可以访问外部函数的参数.但是要注意的是，内部函数不可以访问外部函数参数的arguments对象。</p>\n\n<p>下面我们举个简单的闭包例子\n<code>\nfunction showName(firstName,lastName){ <br />\n return (function makeFullName(){\n       return 'my name is '+firstName+' '+lastName+' ';\n    })();\n}\nshowName('liu','bruce');//my name is liu bruce <br />\n</code>\n闭包被广泛的用在Node.js,使用在Node.js的异步,非块结构.jquery也广泛的使用闭包.下面举个经典的jquery闭包应用:\n<code>\n$(function(){\n var selections=[];\n     $(\".niners\").click(function(){\n      selections.push(this.prop(\"name\"));\n   })\n})\n</code>\n<mark>Closures’ Rules and Side Effects</mark></p>\n\n<p>下面我们谈谈闭包的使用准则和副作用.</p>\n\n<p>1.闭包可以访问它的外层函数的变量，即使该外层函数已经返回(执行return): <br />\n  关于闭包中最难同时也是最重要的特点之一就是：即使闭包的外层函数已经执行return,但是它还是可以访问外层函数的变量.</p>\n\n<p><code>\nfunction celebrityName (firstName) { <br />\n    var nameIntro = \"This celebrity is \";\n    // 内部函数lastName可以直接访问外部函数的变量和参数\n   function lastName (theLastName) {\n        return nameIntro + firstName + \" \" + theLastName;\n    }\n    return lastName;\n}\nvar mjName = celebrityName (\"Michael\"); // 返回的是lastName <br />\nmjName (\"Jackson\"); // This celebrity is Michael Jackson <br />\n// 闭包 (lastName) 被调用\n// 如结果所示，闭包还是可以直接访问外部函数的变量和参数\n</code></p>\n\n<p>2.闭包存储外部函数变量的引用;它不存真实的值.在闭包被正式被调用前修改外部函数的变量值将会发生很多有趣的事情.我们可以把闭包这个强大的特征使用在多个有创意的事情上.比如下面例子，我们可以创建一个private变量. <br />\n<code>\nfunction celebrityID () { <br />\n    var celebrityID = 999;\n    // 我们将返回一个拥有多个内部函数的对象.\n    // 所有的内部函数都可以访问外部函数的变量\n    return {\n        getID: function ()  {\n          return celebrityID;// 这个内部函数将会返回celebrityID变量的值​\n        },\n        setID: function (theNewID)  {\n            celebrityID = theNewID;//这个内部函数将会改变外部函数的变量的值\n        }\n    }\n}\n​\n​var mjID = celebrityID ();\nmjID.getID(); // 999 <br />\nmjID.setID(567); // 改变外部函数的变量值 <br />\nmjID.getID(); // 567: 将会返回最新的外部函数的变量值 <br />\n</code></p>\n\n<p><mark>Closures Gone Awry</mark></p>\n\n<p>闭包的错误用法.\n由于闭包可以访问外部函数的变量，所以在一个循环中使用闭包经常会导致意外的错误.下面举个闭包在循环中的应用例子:\n<code>\n​function celebrityIDCreator (theCelebrities) {\n    var i;\n    var uniqueID = 100;\n    for (i = 0; i &lt; theCelebrities.length; i++) {\n      theCelebrities[i][\"id\"] = function (i)  {\n        (function(x){\n         return uniqueID + x;\n       })();\n      }\n    }\n    return theCelebrities;\n}\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\n​var stalloneID = createIdForActionCelebs [0];  \nconsole.log(stalloneID.id()); // 103 <br />\n</code>\n有没有发现输出的结果有点出乎意料，为什么结果不是100而是103.之前这个例子中，随着这个异步函数被一次次的被调用，i最好被递增到3.用于闭包是通过引用访问外部函数的变量,而不是通过值.所以调用闭包时，最后的返回值都是103.</p>\n\n<p>为了修改这个因为闭包引起的副作用，我们使用\"创建一个匿名函数并立刻执行\"的方法:\n<code>\n​function celebrityIDCreator (theCelebrities) {\n    var i;\n    var uniqueID = 100;\n    for (i = 0; i &lt; theCelebrities.length; i++) {\n      theCelebrities[i][\"id\"] =(function(x){//x参数是i在调用时传过去的\n         return function ()  {\n           return uniqueID + x;\n         }\n      })(i);\n    }\n    return theCelebrities;\n}\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\n​var stalloneID = createIdForActionCelebs [0];  \nconsole.log(stalloneID.id()); // 103 <br />\n</code></p>\n\n<p>refer to <a href=\"http://javascriptissexy.com/understand-javascript-closures-with-ease/\">http://javascriptissexy.com/understand-javascript-closures-with-ease/</a></p>\n\n<p>thx</p>\n\n<p><code>bruce liu                           --2016,7.11.</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":1468243038766,"created_by":1,"updated_at":1468250702063,"updated_by":1,"published_at":1468248942660,"published_by":1}],"users":[{"id":1,"uuid":"c6f2cb4d-9661-4637-869d-3a7847170582","name":"bruce","slug":"bruce","password":"$2a$10$kttVpSn0dBFKRGXeP.DPJO6TanHbkGHHKpq5aWYqXrWNKgex8HcHO","email":"ljhjay1@163.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_login":1473239986803,"created_at":1466661421820,"created_by":1,"updated_at":1473239986803,"updated_by":1}],"roles":[{"id":1,"uuid":"29d96980-a9fb-454d-a060-4b8161d5f3f9","name":"Administrator","description":"Administrators","created_at":1466661419186,"created_by":1,"updated_at":1466661419186,"updated_by":1},{"id":2,"uuid":"8446e2a7-e630-40d8-8129-7b1997be439a","name":"Editor","description":"Editors","created_at":1466661419191,"created_by":1,"updated_at":1466661419191,"updated_by":1},{"id":3,"uuid":"45206363-e2bb-4ef0-8018-90e81271f2b1","name":"Author","description":"Authors","created_at":1466661419197,"created_by":1,"updated_at":1466661419197,"updated_by":1},{"id":4,"uuid":"8948ede7-87ed-4305-8884-67e6f78b6a18","name":"Owner","description":"Blog Owner","created_at":1466661419203,"created_by":1,"updated_at":1466661419203,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"7ebbcf74-5ce5-4186-958e-a1449b31a3ed","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1466661419210,"created_by":1,"updated_at":1466661419210,"updated_by":1},{"id":2,"uuid":"cc414d7e-149b-437c-b4e4-8a02840e429e","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1466661419215,"created_by":1,"updated_at":1466661419215,"updated_by":1},{"id":3,"uuid":"5c1bad96-7e96-45fa-b8b1-02aa921a87a1","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1466661419221,"created_by":1,"updated_at":1466661419221,"updated_by":1},{"id":4,"uuid":"6ecc2880-aef1-4e49-8989-3ce00310458c","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1466661419228,"created_by":1,"updated_at":1466661419228,"updated_by":1},{"id":5,"uuid":"c5c6672a-51cd-4b0e-afcd-48b218419994","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1466661419234,"created_by":1,"updated_at":1466661419234,"updated_by":1},{"id":6,"uuid":"d5db8d14-e5f4-4ea2-a863-a85cd437fc2e","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1466661419239,"created_by":1,"updated_at":1466661419239,"updated_by":1},{"id":7,"uuid":"85f00922-520f-45bb-b454-33322887d741","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1466661419243,"created_by":1,"updated_at":1466661419243,"updated_by":1},{"id":8,"uuid":"3beab8b1-0a58-4c2b-9d8b-8474b1063059","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1466661419250,"created_by":1,"updated_at":1466661419250,"updated_by":1},{"id":9,"uuid":"5c307676-394f-453d-a611-6bbcd1556803","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1466661419257,"created_by":1,"updated_at":1466661419257,"updated_by":1},{"id":10,"uuid":"66fb6165-9c69-41db-9160-9e187c680f23","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1466661419263,"created_by":1,"updated_at":1466661419263,"updated_by":1},{"id":11,"uuid":"9554e567-5548-4f98-b557-f640d327ff2e","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1466661419270,"created_by":1,"updated_at":1466661419270,"updated_by":1},{"id":12,"uuid":"c064dba2-5f6e-49e3-8320-08c821f3691a","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1466661419278,"created_by":1,"updated_at":1466661419278,"updated_by":1},{"id":13,"uuid":"4f0b2899-8497-4565-a66e-9097d0d5dbc2","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1466661419283,"created_by":1,"updated_at":1466661419283,"updated_by":1},{"id":14,"uuid":"9f12e935-74a0-4c8a-94c1-f48d56595224","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1466661419289,"created_by":1,"updated_at":1466661419289,"updated_by":1},{"id":15,"uuid":"03e1c77b-dd03-4113-a7a3-7024ad9a9a29","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1466661419294,"created_by":1,"updated_at":1466661419294,"updated_by":1},{"id":16,"uuid":"fdd4dc2b-f0c0-4301-9c6a-3a9274c31654","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1466661419298,"created_by":1,"updated_at":1466661419298,"updated_by":1},{"id":17,"uuid":"64a83bd7-98f8-43a9-9cc4-043af7e32349","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1466661419303,"created_by":1,"updated_at":1466661419303,"updated_by":1},{"id":18,"uuid":"7f99761c-333c-4b33-b77d-c9adab72eec8","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1466661419308,"created_by":1,"updated_at":1466661419308,"updated_by":1},{"id":19,"uuid":"d48b7c49-b650-49c5-9a2c-320abcc522d5","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1466661419314,"created_by":1,"updated_at":1466661419314,"updated_by":1},{"id":20,"uuid":"3f836128-9b5d-4305-b79d-d6e2fe9b8db0","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1466661419319,"created_by":1,"updated_at":1466661419319,"updated_by":1},{"id":21,"uuid":"50885eb3-f531-452f-8e18-c93d55cb1f23","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1466661419324,"created_by":1,"updated_at":1466661419324,"updated_by":1},{"id":22,"uuid":"710381c9-1b68-4635-b7c5-706d7cc7ed21","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1466661419328,"created_by":1,"updated_at":1466661419328,"updated_by":1},{"id":23,"uuid":"ca3a8d2b-4a17-4a55-93e8-0cd6c6f3dbdf","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1466661419334,"created_by":1,"updated_at":1466661419334,"updated_by":1},{"id":24,"uuid":"91385bcc-e0f1-4702-a296-d1a7700f8523","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1466661419339,"created_by":1,"updated_at":1466661419339,"updated_by":1},{"id":25,"uuid":"5570c514-da44-4b82-a582-9165ed09c319","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1466661419344,"created_by":1,"updated_at":1466661419344,"updated_by":1},{"id":26,"uuid":"0767c56c-45e5-4eda-90ea-9534d48b5874","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1466661419348,"created_by":1,"updated_at":1466661419348,"updated_by":1},{"id":27,"uuid":"7abc1427-914d-4181-bc69-849ec273a838","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1466661419354,"created_by":1,"updated_at":1466661419354,"updated_by":1},{"id":28,"uuid":"f72f0db0-a14a-4339-b95f-da1ba7363b33","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1466661419359,"created_by":1,"updated_at":1466661419359,"updated_by":1},{"id":29,"uuid":"d8d0913e-6b2e-4732-9e0b-ab3efe8101fd","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1466661419363,"created_by":1,"updated_at":1466661419363,"updated_by":1},{"id":30,"uuid":"576a8f6a-3d11-4cb2-a0db-f0ee3e73aede","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1466661419367,"created_by":1,"updated_at":1466661419367,"updated_by":1},{"id":31,"uuid":"439d5e1b-bf52-4d15-924d-1722568aec00","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":1466661419372,"created_by":1,"updated_at":1466661419372,"updated_by":1},{"id":32,"uuid":"769b59f2-4e32-445d-849c-13e23f89cf19","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":1466661419377,"created_by":1,"updated_at":1466661419377,"updated_by":1},{"id":33,"uuid":"b5ce0e7b-6772-4c9d-9c71-d494462e634d","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":1466661419385,"created_by":1,"updated_at":1466661419385,"updated_by":1},{"id":34,"uuid":"ed695614-c5d4-4e1f-a99c-4c386fd958ca","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":1466661419393,"created_by":1,"updated_at":1466661419393,"updated_by":1},{"id":35,"uuid":"7fd731a9-03e9-4e2f-99d9-8a8c4d4e4e19","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":1466661419397,"created_by":1,"updated_at":1466661419397,"updated_by":1},{"id":36,"uuid":"89ea0d58-794d-48b7-b8b0-fa188cfbaf03","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":1466661419402,"created_by":1,"updated_at":1466661419402,"updated_by":1},{"id":37,"uuid":"c1327dae-43d7-4f0a-b1a1-4b8da4b93e52","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":1466661419406,"created_by":1,"updated_at":1466661419406,"updated_by":1},{"id":38,"uuid":"e196e2a1-232e-4bd0-96cd-37d24b2c3a45","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":1466661419411,"created_by":1,"updated_at":1466661419411,"updated_by":1},{"id":39,"uuid":"b8e09f4c-1bb0-4afe-a08e-f36f4d77ba11","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":1466661419418,"created_by":1,"updated_at":1466661419418,"updated_by":1},{"id":40,"uuid":"3bb0c8a3-883f-4e59-9d2d-892082747cd7","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":1466661419423,"created_by":1,"updated_at":1466661419423,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":1,"permission_id":34},{"id":35,"role_id":1,"permission_id":35},{"id":36,"role_id":1,"permission_id":36},{"id":37,"role_id":1,"permission_id":37},{"id":38,"role_id":1,"permission_id":38},{"id":39,"role_id":1,"permission_id":39},{"id":40,"role_id":1,"permission_id":40},{"id":41,"role_id":2,"permission_id":8},{"id":42,"role_id":2,"permission_id":9},{"id":43,"role_id":2,"permission_id":10},{"id":44,"role_id":2,"permission_id":11},{"id":45,"role_id":2,"permission_id":12},{"id":46,"role_id":2,"permission_id":13},{"id":47,"role_id":2,"permission_id":14},{"id":48,"role_id":2,"permission_id":16},{"id":49,"role_id":2,"permission_id":17},{"id":50,"role_id":2,"permission_id":18},{"id":51,"role_id":2,"permission_id":19},{"id":52,"role_id":2,"permission_id":20},{"id":53,"role_id":2,"permission_id":21},{"id":54,"role_id":2,"permission_id":24},{"id":55,"role_id":2,"permission_id":25},{"id":56,"role_id":2,"permission_id":26},{"id":57,"role_id":2,"permission_id":27},{"id":58,"role_id":2,"permission_id":28},{"id":59,"role_id":2,"permission_id":29},{"id":60,"role_id":2,"permission_id":30},{"id":61,"role_id":2,"permission_id":31},{"id":62,"role_id":2,"permission_id":32},{"id":63,"role_id":2,"permission_id":33},{"id":64,"role_id":2,"permission_id":34},{"id":65,"role_id":2,"permission_id":35},{"id":66,"role_id":2,"permission_id":39},{"id":67,"role_id":3,"permission_id":8},{"id":68,"role_id":3,"permission_id":9},{"id":69,"role_id":3,"permission_id":11},{"id":70,"role_id":3,"permission_id":13},{"id":71,"role_id":3,"permission_id":14},{"id":72,"role_id":3,"permission_id":16},{"id":73,"role_id":3,"permission_id":17},{"id":74,"role_id":3,"permission_id":18},{"id":75,"role_id":3,"permission_id":20},{"id":76,"role_id":3,"permission_id":24},{"id":77,"role_id":3,"permission_id":25},{"id":78,"role_id":3,"permission_id":30},{"id":79,"role_id":3,"permission_id":31},{"id":80,"role_id":3,"permission_id":32},{"id":81,"role_id":3,"permission_id":33},{"id":82,"role_id":3,"permission_id":34},{"id":83,"role_id":3,"permission_id":35},{"id":84,"role_id":3,"permission_id":39}],"permissions_apps":[],"settings":[{"id":1,"uuid":"fd4c7d69-0d77-4bc5-a4f8-3c68af3edd56","key":"databaseVersion","value":"005","type":"core","created_at":1466661421850,"created_by":1,"updated_at":1466661421850,"updated_by":1},{"id":2,"uuid":"59774f62-d7f9-4eb5-b90f-75330ca3c46f","key":"dbHash","value":"7a314b75-becc-4e78-b3cc-9d722018f454","type":"core","created_at":1466661421850,"created_by":1,"updated_at":1466661421969,"updated_by":1},{"id":3,"uuid":"004a1b64-ada5-474f-a8e2-a2c4d56b7bb0","key":"nextUpdateCheck","value":"1473326300","type":"core","created_at":1466661421850,"created_by":1,"updated_at":1473239975938,"updated_by":1},{"id":4,"uuid":"d2bcde55-a548-4368-adc2-7d383dbe9f61","key":"displayUpdateNotification","value":"0.10.0","type":"core","created_at":1466661421850,"created_by":1,"updated_at":1473239975940,"updated_by":1},{"id":5,"uuid":"7692be03-6db5-4f3e-8870-53ed04f9ef71","key":"title","value":"Just wanna have a talk","type":"blog","created_at":1466661421850,"created_by":1,"updated_at":1468403699643,"updated_by":1},{"id":6,"uuid":"e1e98047-c172-40c8-9d9a-43b81f63443d","key":"description","value":"Thoughts, stories and ideas.","type":"blog","created_at":1466661421850,"created_by":1,"updated_at":1468403699645,"updated_by":1},{"id":7,"uuid":"48ca1584-3140-417e-a789-f07320ffe6cc","key":"logo","value":"/content/images/2016/06/liu.png","type":"blog","created_at":1466661421850,"created_by":1,"updated_at":1468403699646,"updated_by":1},{"id":8,"uuid":"77d181b4-abcb-4277-bab7-29948c5e0d84","key":"cover","value":"/content/images/2016/06/sky.jpg","type":"blog","created_at":1466661421850,"created_by":1,"updated_at":1468403699647,"updated_by":1},{"id":9,"uuid":"a0bff660-d1f4-4c6c-9136-4697fba1413a","key":"defaultLang","value":"en_US","type":"blog","created_at":1466661421851,"created_by":1,"updated_at":1468403699648,"updated_by":1},{"id":10,"uuid":"c51c5829-e870-464c-8d10-b1ba5cdfdc1d","key":"postsPerPage","value":"5","type":"blog","created_at":1466661421851,"created_by":1,"updated_at":1468403699650,"updated_by":1},{"id":11,"uuid":"caa663e1-4718-4dba-9aa3-9f39b4549cbd","key":"forceI18n","value":"true","type":"blog","created_at":1466661421851,"created_by":1,"updated_at":1468403699651,"updated_by":1},{"id":12,"uuid":"360ae66d-dd70-4497-b5de-4183c537c388","key":"permalinks","value":"/:slug/","type":"blog","created_at":1466661421851,"created_by":1,"updated_at":1468403699652,"updated_by":1},{"id":13,"uuid":"df92bcec-f712-41a0-82a8-bea6cf152556","key":"ghost_head","value":"","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699655,"updated_by":1},{"id":14,"uuid":"557327f1-b812-47bf-9562-a0f5b7ed85ac","key":"ghost_foot","value":"contact me by ljhjay1@163.com","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699656,"updated_by":1},{"id":15,"uuid":"98364660-e913-44c7-9045-b044127da474","key":"facebook","value":"","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699657,"updated_by":1},{"id":16,"uuid":"90a8ea9c-d865-4ca4-8828-31b49661a651","key":"twitter","value":"","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699658,"updated_by":1},{"id":17,"uuid":"9cc75897-535c-491b-aa40-5d8610173e67","key":"labs","value":"{}","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699659,"updated_by":1},{"id":18,"uuid":"3dbda785-7609-49d9-a82d-1f0680cc8275","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"http://www.brusport.com/\"},{\"label\":\"Signin\",\"url\":\"http://www.brusport.com/ghost/signup\"}]","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699661,"updated_by":1},{"id":19,"uuid":"dbb621d4-247c-4ca3-a430-06674619d5be","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":1466661421852,"created_by":1,"updated_at":1468403699664,"updated_by":1},{"id":20,"uuid":"8a93cef9-0980-4fae-8b5f-cf183d59146c","key":"activeApps","value":"[]","type":"app","created_at":1466661421853,"created_by":1,"updated_at":1466661421853,"updated_by":1},{"id":21,"uuid":"931731fe-2f84-44c6-bd4a-c383b3e3ba3e","key":"installedApps","value":"[]","type":"app","created_at":1466661421853,"created_by":1,"updated_at":1467621602901,"updated_by":1},{"id":22,"uuid":"05334d33-26d3-45bf-9b2c-ab015f108c2b","key":"isPrivate","value":"false","type":"private","created_at":1466661421853,"created_by":1,"updated_at":1468403699662,"updated_by":1},{"id":23,"uuid":"e2180992-0ed1-479d-892f-9262fd77c983","key":"password","value":"welcome1","type":"private","created_at":1466661421853,"created_by":1,"updated_at":1468403699663,"updated_by":1},{"id":24,"uuid":"586e54c5-15f5-4e6e-9b4c-1452aeb4ab1b","key":"activeTheme","value":"casper","type":"theme","created_at":1466661421852,"created_by":1,"updated_at":1468403699653,"updated_by":1}],"tags":[{"id":1,"uuid":"d632bfb2-4a5b-4d34-96de-5f20dd3842d2","name":"Getting Started","slug":"getting-started","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":1466661419156,"created_by":1,"updated_at":1466661419156,"updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[]}}]}